{"ast":null,"code":"var _jsxFileName = \"C:\\\\angular\\\\assignments003\\\\src\\\\Playlist.js\";\nimport React from 'react';\nimport 'whatwg-fetch';\nimport 'es6-promise'; //import getPlaylist from './Service';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playlist: [],\n      title: \"\",\n      url: \"\"\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    console.log('UNSAFE_componentWillMount', this.props);\n    this.getPlaylist();\n  }\n\n  getPlaylist() {\n    var result = fetch('http://localhost:3000/playlist', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      mode: 'cors',\n      cache: 'default'\n    });\n    result.then(res => {\n      res.json().then(data => {\n        console.log(\"data:\", data);\n\n        if (data != null) {\n          this.setState({\n            playlist: data\n          });\n\n          for (let play of data) {\n            console.log(\"play:\", play);\n          }\n        }\n      });\n    });\n  }\n\n  componentDidMount() {}\n\n  playlistClick(play) {\n    this.props.player.current.playlistClick(play.id, play.URL);\n    this.props.playlistClick(play.id);\n  }\n\n  addVideo() {\n    let count = this.state.playlist.length;\n    let postData = {\n      \"id\": count + 1,\n      \"Title\": this.state.title,\n      \"URL\": this.state.url\n    };\n    var result = fetch('http://localhost:3000/playlist/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      mode: 'cors',\n      cache: 'default',\n      body: JSON.stringify(postData)\n    });\n    result.then(res => {\n      res.json().then(data => {\n        console.log(\"data:\", data);\n\n        if (data != null) {\n          this.getPlaylist();\n        }\n      });\n    });\n    console.log(this.state.url);\n  }\n\n  inputChangeHandler(e) {\n    console.log(\"inputChangeHandler\", e.target);\n\n    if (e.target.id === 'title') {\n      this.setState({\n        \"title\": e.target.value\n      });\n    } else if (e.target.id === 'url') {\n      this.setState({\n        \"url\": e.target.value\n      });\n    }\n  }\n\n  playlistDelete(play) {\n    var result = fetch('http://localhost:3000/playlist/' + play.id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      mode: 'cors',\n      cache: 'default'\n    });\n    result.then(res => {\n      res.json().then(data => {\n        console.log(\"data:\", data);\n\n        if (data != null) {\n          this.getPlaylist();\n        }\n      });\n    });\n  }\n\n  render() {\n    var playlistHtml = [];\n\n    for (let play of this.state.playlist) {\n      playlistHtml.push(React.createElement(\"li\", {\n        key: play.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"javascript:void(0)\",\n        onClick: () => this.playlistClick(play),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \" \", play.Title), \"\\xA0\\xA0\", React.createElement(\"a\", {\n        href: \"javascript:void(0)\",\n        onClick: () => this.playlistDelete(play),\n        style: {\n          color: 'blueviolet'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Delete\")));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Title:\"), React.createElement(\"input\", {\n      type: \"input\",\n      id: \"title\",\n      onChange: this.inputChangeHandler.bind(this),\n      defaultValue: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"URL:\"), React.createElement(\"input\", {\n      type: \"input\",\n      id: \"url\",\n      onChange: this.inputChangeHandler.bind(this),\n      defaultValue: this.state.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), \"\\xA0\\xA0\", React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Add Video\",\n      onClick: () => {\n        this.addVideo();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      id: \"playList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, playlistHtml));\n  }\n\n}\n\nexport default Playlist;","map":{"version":3,"sources":["C:\\angular\\assignments003\\src\\Playlist.js"],"names":["React","Playlist","Component","constructor","props","state","playlist","title","url","UNSAFE_componentWillMount","console","log","getPlaylist","result","fetch","method","headers","mode","cache","then","res","json","data","setState","play","componentDidMount","playlistClick","player","current","id","URL","addVideo","count","length","postData","body","JSON","stringify","inputChangeHandler","e","target","value","playlistDelete","render","playlistHtml","push","Title","color","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'whatwg-fetch';\r\nimport 'es6-promise';\r\n//import getPlaylist from './Service';\r\n\r\nclass Playlist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          playlist: [],\r\n          title: \"\",\r\n          url: \"\"\r\n        };\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n\r\n    console.log('UNSAFE_componentWillMount', this.props);\r\n    this.getPlaylist();\r\n    \r\n    }\r\n\r\n    getPlaylist() {\r\n        var result = fetch('http://localhost:3000/playlist',{\r\n            method:'GET',\r\n            headers:{\r\n              'Content-Type':'application/json;charset=UTF-8'\r\n            },\r\n            mode:'cors',\r\n            cache:'default'\r\n          });\r\n        \r\n          result.then(res => {\r\n    \r\n              res.json().then(data => {\r\n                console.log(\"data:\", data);\r\n                if (data != null) {\r\n                    this.setState({playlist: data});\r\n                    for (let play of data) {\r\n                        console.log(\"play:\", play);\r\n                    }\r\n                }\r\n            });\r\n          });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    playlistClick(play) {\r\n        this.props.player.current.playlistClick(play.id, play.URL);\r\n        this.props.playlistClick(play.id);\r\n    }\r\n\r\n    addVideo() {\r\n        let count = this.state.playlist.length;\r\n        let postData = {\"id\": count+1, \"Title\": this.state.title, \"URL\": this.state.url};\r\n        var result = fetch('http://localhost:3000/playlist/',{\r\n            method:'POST',\r\n            headers:{\r\n              'Content-Type':'application/json;charset=UTF-8'\r\n            },\r\n            mode:'cors',\r\n            cache:'default',\r\n            body: JSON.stringify(postData)\r\n          });\r\n        \r\n          result.then(res => {\r\n              res.json().then(data => {\r\n                console.log(\"data:\", data);\r\n                if (data != null) {\r\n                    this.getPlaylist();\r\n                }\r\n            });\r\n          });\r\n        console.log(this.state.url);\r\n    }\r\n\r\n    inputChangeHandler(e) {\r\n        \r\n        console.log(\"inputChangeHandler\", e.target);\r\n        \r\n        if (e.target.id === 'title') {\r\n            \r\n            this.setState({\"title\": e.target.value});\r\n        } else if (e.target.id === 'url') {\r\n            this.setState({\"url\": e.target.value});\r\n        }\r\n        \r\n    }\r\n    playlistDelete(play) {\r\n        var result = fetch('http://localhost:3000/playlist/'+play.id,{\r\n            method:'DELETE',\r\n            headers:{\r\n              'Content-Type':'application/json;charset=UTF-8'\r\n            },\r\n            mode:'cors',\r\n            cache:'default'\r\n          });\r\n        \r\n          result.then(res => {\r\n    \r\n              res.json().then(data => {\r\n                console.log(\"data:\", data);\r\n                if (data != null) {\r\n                    this.getPlaylist();\r\n                }\r\n            });\r\n          });\r\n    }\r\n\r\n    render() {\r\n        var playlistHtml = [];\r\n        \r\n        for (let play of this.state.playlist) {\r\n            playlistHtml.push(<li key={play.id}><a href=\"javascript:void(0)\" onClick={()=>this.playlistClick(play)}> {play.Title}</a>&nbsp;&nbsp;<a href=\"javascript:void(0)\" onClick={()=>this.playlistDelete(play)} style={{color:'blueviolet'}}>Delete</a></li>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <label>Title:</label><input type=\"input\" id=\"title\" onChange={this.inputChangeHandler.bind(this)} defaultValue={this.state.title}/>\r\n                    <label>URL:</label><input type=\"input\" id=\"url\" onChange={this.inputChangeHandler.bind(this)} defaultValue={this.state.url}/>&nbsp;&nbsp;\r\n                    <input type=\"submit\" value=\"Add Video\" onClick={()=>{this.addVideo()}} />\r\n                </div>\r\n                <ul id=\"playList\">\r\n                    {playlistHtml}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;"]},"metadata":{},"sourceType":"module"}